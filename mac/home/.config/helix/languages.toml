[[language]]
    name            = "rust"
    scope           = "source.rust"
    injection-regex = "rust"
    file-types      = ["rs"]
    roots           = ["Cargo.toml", "Cargo.lock"]
    auto-format     = true
    comment-token   = "//"
    language-server = { command = "rust-analyzer" }
    indent          = { tab-width = 4, unit = "    " }

    [language.auto-pairs]
        '(' = ')'
        '{' = '}'
        '[' = ']'
        '"' = '"'
        '`' = '`'

[[language]]
    name            = "toml"
    scope           = "source.toml"
    injection-regex = "toml"
    file-types      = ["toml"]
    roots           = []
    comment-token   = "#"

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "protobuf"
    scope           = "source.proto"
    injection-regex = "protobuf"
    file-types      = ["proto"]
    roots           = []
    comment-token   = "//"

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "fish"
    scope           = "source.fish"
    injection-regex = "fish"
    file-types      = ["fish"]
    shebangs        = ["fish"]
    roots           = []
    comment-token   = "#"

    indent = { tab-width = 4, unit = "    " }

[[language]]
    name            = "json"
    scope           = "source.json"
    injection-regex = "json"
    file-types      = ["json"]
    roots           = []

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "c"
    scope           = "source.c"
    injection-regex = "c"
    file-types      = ["c"]      # TODO: ["h"]
    roots           = []
    comment-token   = "//"

    language-server = { command = "clangd" }
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name = "cpp"
    scope = "source.cpp"
    injection-regex = "cpp"
    file-types = [
        "cc",
        "hh",
        "cpp",
        "hpp",
        "h",
        "ipp",
        "tpp",
        "cxx",
        "hxx",
        "ixx",
        "txx",
        "ino",
    ]
    roots = []
    comment-token = "//"

    language-server = { command = "clangd" }
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name            = "c-sharp"
    scope           = "source.csharp"
    injection-regex = "c-?sharp"
    file-types      = ["cs"]
    roots           = []
    comment-token   = "//"

    indent = { tab-width = 4, unit = "\t" }

[[language]]
    name            = "go"
    scope           = "source.go"
    injection-regex = "go"
    file-types      = ["go"]
    roots           = ["Gopkg.toml", "go.mod"]
    auto-format     = true
    comment-token   = "//"

    language-server = { command = "gopls" }
    # TODO: gopls needs utf-8 offsets?
    indent = { tab-width = 4, unit = "\t" }

[[language]]
    name            = "javascript"
    scope           = "source.js"
    injection-regex = "^(js|javascript)$"
    file-types      = ["js", "mjs"]
    shebangs        = ["node"]
    roots           = []
    comment-token   = "//"
    # TODO: highlights-jsx, highlights-params

    language-server = { command = "typescript-language-server", args = [
        "--stdio",
    ], language-id = "javascript" }
    indent = { tab-width = 2, unit = "  " }

    [language.debugger]
        name      = "node-debug2"
        transport = "stdio"
        # args consisting of cmd (node) and path to adapter should be added to user's configuration
        quirks = { absolute-paths = true }

        [[language.debugger.templates]]
            name = "source"
            request = "launch"
            completion = [
                { name = "main", completion = "filename", default = "index.js" },
            ]
            args = { program = "{0}" }

[[language]]
    name            = "typescript"
    scope           = "source.ts"
    injection-regex = "^(ts|typescript)$"
    file-types      = ["ts"]
    shebangs        = []
    roots           = []
    # TODO: highlights-jsx, highlights-params

    language-server = { command = "typescript-language-server", args = [
        "--stdio",
    ], language-id = "typescript" }
    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "tsx"
    scope           = "source.tsx"
    injection-regex = "^(tsx)$"    # |typescript
    file-types      = ["tsx"]
    roots           = []
    # TODO: highlights-jsx, highlights-params

    language-server = { command = "typescript-language-server", args = [
        "--stdio",
    ], language-id = "typescriptreact" }
    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "css"
    scope           = "source.css"
    injection-regex = "css"
    file-types      = ["css", "scss"]
    roots           = []

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "html"
    scope           = "text.html.basic"
    injection-regex = "html"
    file-types      = ["html"]
    roots           = []

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "python"
    scope           = "source.python"
    injection-regex = "python"
    file-types      = ["py"]
    shebangs        = ["python"]
    roots           = []
    comment-token   = "#"

    language-server = { command = "ruff" }
    indent          = { tab-width = 4, unit = "    " }

[[language]]
    name            = "nix"
    scope           = "source.nix"
    injection-regex = "nix"
    file-types      = ["nix"]
    shebangs        = []
    roots           = []
    comment-token   = "#"

    language-server = { command = "rnix-lsp" }
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name            = "ruby"
    scope           = "source.ruby"
    injection-regex = "ruby"
    file-types      = ["rb"]
    shebangs        = ["ruby"]
    roots           = []
    comment-token   = "#"

    language-server = { command = "solargraph", args = ["stdio"] }
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name = "bash"
    scope = "source.bash"
    injection-regex = "bash"
    file-types = [
        "sh",
        "bash",
        "zsh",
        ".bash_login",
        ".bash_logout",
        ".bash_profile",
        ".bashrc",
        ".profile",
        ".zshenv",
        ".zlogin",
        ".zlogout",
        ".zprofile",
        ".zshrc",
    ]
    shebangs = ["sh", "bash", "dash"]
    roots = []
    comment-token = "#"

    language-server = { command = "bash-language-server", args = ["start"] }
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name            = "php"
    scope           = "source.php"
    injection-regex = "php"
    file-types      = ["php"]
    shebangs        = ["php"]
    roots           = []

    indent = { tab-width = 4, unit = "    " }

[[language]]
    name            = "twig"
    scope           = "source.twig"
    injection-regex = "twig"
    file-types      = ["twig"]
    roots           = []

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "latex"
    scope           = "source.tex"
    injection-regex = "tex"
    file-types      = ["tex"]
    roots           = []
    comment-token   = "%"

    indent = { tab-width = 4, unit = "\t" }

[[language]]
    name = "julia"
    scope = "source.julia"
    injection-regex = "julia"
    file-types = ["jl"]
    roots = []
    comment-token = "#"
    language-server = { command = "julia", args = [
        "--startup-file=no",
        "--history-file=no",
        "--quiet",
        "-e",
        """
                using LanguageServer;
                using Pkg;
                import StaticLint;
                env_path = dirname(Pkg.Types.Context().env.project_file);
                server = LanguageServer.LanguageServerInstance(stdin, stdout, env_path, "");
                server.runlinter = true;
                run(server);
        """,
    ] }
    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "java"
    scope           = "source.java"
    injection-regex = "java"
    file-types      = ["java"]
    roots           = ["pom.xml"]
    indent          = { tab-width = 4, unit = "    " }

[[language]]
    name          = "lua"
    scope         = "source.lua"
    file-types    = ["lua"]
    shebangs      = ["lua"]
    roots         = []
    comment-token = "--"
    indent        = { tab-width = 2, unit = "  " }

[[language]]
    name            = "svelte"
    scope           = "source.svelte"
    injection-regex = "svelte"
    file-types      = ["svelte"]
    roots           = []
    indent          = { tab-width = 2, unit = "  " }
    language-server = { command = "svelteserver", args = ["--stdio"] }


[[language]]
    name            = "vue"
    scope           = "source.vue"
    injection-regex = "vue"
    file-types      = ["vue"]
    roots           = []
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name            = "yaml"
    scope           = "source.yaml"
    file-types      = ["yml", "yaml"]
    roots           = []
    comment-token   = "#"
    indent          = { tab-width = 2, unit = "  " }
    injection-regex = "yml|yaml"


[[language]]
    name            = "cmake"
    scope           = "source.cmake"
    file-types      = ["cmake", "CMakeLists.txt"]
    roots           = []
    comment-token   = "#"
    indent          = { tab-width = 2, unit = "  " }
    language-server = { command = "cmake-language-server" }
    injection-regex = "cmake"

[[language]]
    name          = "make"
    scope         = "source.make"
    file-types    = ["Makefile", "makefile", "justfile", ".justfile"]
    roots         = []
    comment-token = "#"
    indent        = { tab-width = 4, unit = "\t" }

[[language]]
    name            = "glsl"
    scope           = "source.glsl"
    file-types      = ["glsl", "vert", "tesc", "tese", "geom", "frag", "comp"]
    roots           = []
    comment-token   = "//"
    indent          = { tab-width = 4, unit = "    " }
    injection-regex = "glsl"

[[language]]
    name          = "perl"
    scope         = "source.perl"
    file-types    = ["pl", "pm"]
    shebangs      = ["perl"]
    roots         = []
    comment-token = "#"
    indent        = { tab-width = 2, unit = "  " }

[[language]]
    name          = "wgsl"
    scope         = "source.wgsl"
    file-types    = ["wgsl"]
    roots         = []
    comment-token = "//"
    indent        = { tab-width = 4, unit = "    " }

[[language]]
    name            = "llvm"
    scope           = "source.llvm"
    roots           = []
    file-types      = ["ll"]
    comment-token   = ";"
    indent          = { tab-width = 2, unit = "  " }
    injection-regex = "llvm"

[[language]]
    name            = "llvm-mir"
    scope           = "source.llvm_mir"
    roots           = []
    file-types      = []
    comment-token   = ";"
    indent          = { tab-width = 2, unit = "  " }
    injection-regex = "mir"

[[language]]
    name          = "llvm-mir-yaml"
    scope         = "source.yaml"
    roots         = []
    file-types    = ["mir"]
    comment-token = "#"
    indent        = { tab-width = 2, unit = "  " }

[[language]]
    name            = "markdown"
    scope           = "source.md"
    injection-regex = "md|markdown"
    file-types      = ["md"]
    roots           = []

    indent = { tab-width = 2, unit = "  " }

[[language]]
    name = "dart"
    scope = "source.dart"
    file-types = ["dart"]
    roots = ["pubspec.yaml"]
    auto-format = true
    comment-token = "//"
    language-server = { command = "dart", args = [
        "language-server",
        "--client-id=helix",
    ] }
    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "scala"
    scope           = "source.scala"
    roots           = ["build.sbt", "pom.xml"]
    file-types      = ["scala", "sbt"]
    comment-token   = "//"
    indent          = { tab-width = 2, unit = "  " }
    language-server = { command = "metals" }

[[language]]
    name            = "dockerfile"
    scope           = "source.dockerfile"
    injection-regex = "docker|dockerfile"
    roots           = ["Dockerfile"]
    file-types      = ["Dockerfile", "dockerfile"]
    comment-token   = "#"
    indent          = { tab-width = 2, unit = "  " }
    language-server = { command = "docker-langserver", args = ["--stdio"] }

[[language]]
    name          = "git-commit"
    scope         = "git.commitmsg"
    roots         = []
    file-types    = ["COMMIT_EDITMSG"]
    comment-token = "#"
    indent        = { tab-width = 2, unit = "  " }

[[language]]
    name            = "git-diff"
    scope           = "source.diff"
    roots           = []
    file-types      = ["diff"]
    injection-regex = "diff"
    comment-token   = "#"
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name            = "git-rebase"
    scope           = "source.gitrebase"
    roots           = []
    file-types      = ["git-rebase-todo"]
    injection-regex = "git-rebase"
    comment-token   = "#"
    indent          = { tab-width = 2, unit = " " }

[[language]]
    name            = "regex"
    scope           = "source.regex"
    injection-regex = "regex"
    file-types      = ["regex"]
    roots           = []

[[language]]
    name  = "git-config"
    scope = "source.gitconfig"
    roots = []
    # TODO: allow specifying file-types as a regex so we can read directory names (e.g. `.git/config`)
    file-types      = [".gitmodules", ".gitconfig"]
    injection-regex = "git-config"
    comment-token   = "#"
    indent          = { tab-width = 4, unit = "\t" }

[[language]]
    name            = "graphql"
    scope           = "source.graphql"
    injection-regex = "graphql"
    file-types      = ["gql", "graphql"]
    roots           = []
    indent          = { tab-width = 2, unit = "  " }

[[language]]
    name = "rescript"
    scope = "source.rescript"
    injection-regex = "rescript"
    file-types = ["res"]
    roots = ["bsconfig.json"]
    auto-format = true
    comment-token = "//"
    language-server = { command = "rescript-language-server", args = [
        "--stdio",
    ] }
    indent = { tab-width = 2, unit = "  " }

[[language]]
    name            = "kotlin"
    scope           = "source.kotlin"
    file-types      = ["kt", "kts"]
    roots           = ["settings.gradle", "settings.gradle.kts"]
    comment-token   = "//"
    indent          = { tab-width = 4, unit = "    " }
    language-server = { command = "kotlin-language-server" }

[[language]]
    name            = "hcl"
    scope           = "source.hcl"
    injection-regex = "(hcl|tf)"
    file-types      = ["hcl", "tf"]
    roots           = []
    comment-token   = "#"
    indent          = { tab-width = 2, unit = "  " }
