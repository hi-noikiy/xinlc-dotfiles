## :config-write-py --defaults
##
## Autogenerated config.py
## NOTE: config.py is intended for advanced users who are comfortable
## with manually migrating the config file on qutebrowser upgrades. If
## you prefer, you can also configure qutebrowser using the
## :set/:bind/:config-* commands without having to write a config.py
## file.
##
## Documentation:
##   qute://help/configuring.html
##   qute://help/settings.html

import os

# pylint: disable=C0111
c = c  # noqa: F821 pylint: disable=E0602,C0103
config = config  # noqa: F821 pylint: disable=E0602,C0103

## This is here so configs done via the GUI are still loaded.
## Remove it to not load settings done via the GUI.
config.load_autoconfig(False)
config.source("bindings.py")
config.source('theme.py')

# general
c.colors.webpage.preferred_color_scheme = 'dark'
c.completion.shrink = True
c.completion.use_best_match = True
c.completion.scrollbar.width = 10
c.completion.timestamp_format = "%Y-%m-%d %H:%M:%S"

c.downloads.remove_finished = 10000
c.downloads.position = 'bottom'
c.downloads.location.prompt = False
c.downloads.location.directory = os.path.expanduser('~/downloads')

# c.statusbar.widgets = ['progress', 'keypress', 'url', 'history']
# c.statusbar.widgets = ['keypress', 'search_match', 'url', 'scroll', 'history', 'tabs', 'progress']
# c.scrolling.bar = 'always'
# c.scrolling.smooth = True

c.new_instance_open_target = "tab-silent"
c.new_instance_open_target_window = "last-focused"

# c.tabs.title.format = '{index}: {audio}{current_title}'
# c.tabs.title.format_pinned = '{index}: {audio}{current_title}'
c.tabs.title.format = '{audio}{index}: {perc}{current_title}'
c.tabs.position = 'top'
c.tabs.show = 'switching'
c.tabs.show_switching_delay = 3000
c.tabs.title.alignment = 'center'
# c.tabs.last_close = 'close'
c.tabs.mousewheel_switching = False
c.tabs.padding = {'left': 5, 'right': 5, 'top': 2, 'bottom': 2}
c.tabs.background = True
c.window.hide_decoration = True

c.auto_save.session = True
c.session.lazy_restore = True

c.confirm_quit = ['multiple-tabs', 'downloads']
c.content.proxy = 'http://localhost:7890/'
c.content.default_encoding = 'utf-8'
c.content.notifications.enabled = True
# c.content.print_element_backgrounds = False
c.content.user_stylesheets = ["user-stylesheet.css"]
c.content.cache.size = 52428800
c.content.pdfjs = True
# c.content.webgl = False
# c.content.geolocation = False
# c.content.plugins = False

c.content.blocking.adblock.lists = [
    "https://easylist.to/easylist/easylist.txt",
    "https://easylist.to/easylist/easyprivacy.txt",
    # uBlock - built-in filters - https://github.com/uBlockOrigin/uAssets/tree/master/filters
    "https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/filters.txt",
    "https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/badware.txt",
    "https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/privacy.txt",
    "https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/resource-abuse.txt",
    "https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/unbreak.txt",
    # uBlock - CZE, SVK: EasyList Czech and Slovak
    "https://raw.githubusercontent.com/tomasko126/easylistczechandslovak/master/filters.txt",
]

# c.fileselect.handler = 'external'
# c.fileselect.single_file.command = ['kitty', 'sh', '-c', 'xplr > {}']
# c.fileselect.multiple_files.command = ['kitty', 'sh', '-c', 'xplr > {}']
# c.editor.command = ['kitty', 'kak', '-e', 'exec {line}g{column0}l', '{}']
c.editor.command = ["alacritty", "--command", "bash", "-c", "nvim -f \"{file}\" -c \"normal {line}G{column0}l\""]

# if 'EDITOR' in os.environ:
#     c.editor.command = [os.environ['EDITOR'] + ' "{}"']

c.hints.next_regexes = [
    '\\bnext\\b',
    '\\bmore\\b',
    '\\bnewer\\b',
    '\\b[>→≫]\\b',
    '\\b(>>|»)\\b',
    '\\bcontinue\\b',
    '\\b下一?页\\b'
]
c.hints.prev_regexes = [
    '\\bprev(ious)?\\b',
    '\\bback\\b',
    '\\bolder\\b',
    '\\b[<←≪]\\b',
    '\\b(<<|«)\\b',
    '\\b上一?页\\b'
]

# urls
# c.url.default_page = 'https://google.com/'
# c.url.start_pages = ["https://start.duckduckgo.com"]
c.url.searchengines = {
    'DEFAULT': 'https://google.com/search?q={}',
    'gg': 'https://google.com/search?q={}',
    'bd': 'https://baidu.com/s?wd={}',
    'dg': 'https://duckduckgo.com/?q={}',
    'gh': 'https://github.com/search?q={}',
    '//': 'https://grep.app/search?q={}',
    'codelf': 'https://unbug.github.io/codelf/#{}',
    'npm': 'https://npmjs.com/search?q={}',
    'reddit': 'https://www.reddit.com/search/?q={}',
    'douban': 'https://douban.com/search?q={}',
    'ec': 'https://emacs-china.org/search?q={}',
    'zh': 'https://zhihu.com/search?q={}',
    'ytb': 'https://www.youtube.com/results?search_query={}&search=Search',
    'aur': 'http://aur.archlinux.org/packages.php?O=0&L=0&C=0&K={}',
    'aw': 'https://wiki.archlinux.org/index.php/Special:Search?search={}',
    'aman': 'https://man.archlinux.org/search?q={}',
    'archpkgs': 'https://archlinux.org/packages/?q={}',
    'lo': 'http://localhost:{}',
}

# available qt-flags:
#   Qt: http://doc.qt.io/qt-5/qapplication.html#QApplication
#   Chromium: https://cs.chromium.org/chromium/src/content/public/common/content_switches.cc
#   --blink-settings: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/frame/Settings.json5
# c.qt.args = [
#     # NOTE: login to gitlab.com requires reading from canvas
# #    "disable-reading-from-canvas",
#     "enable-strict-mixed-content-checking",
# #    "disable-remote-fonts",
# ]

# workaround for high-memory usage
# https://github.com/qutebrowser/qutebrowser/issues/1476#issuecomment-889859126
# c.qt.force_software_rendering = "qt-quick"


# privacy
c.content.cookies.accept = 'no-3rdparty'
# c.content.webrtc_ip_handling_policy = 'default-public-interface-only'

# per-site whitelist for javascript
# c.content.javascript.enabled = False
# js_whitelist = [
#     '*://*.youtube.com/*',
#     '*://127.0.0.1/*',
#     '*://darksky.net/*',
#     '*://deepl.com/*',
#     '*://duckduckgo.com/*',
#     '*://github.com/*',
#     '*://linkedin.com/*',
#     '*://localhost/*',
#     '*://news.ycombinator.com/*',
#     '*://reddit.com/*',
#     '*://translate.google.com/*',
# ]

# private_whitelist = os.path.expanduser(
#     '~/.config/qutebrowser/private-whitelist'
# )
# if os.path.exists(private_whitelist):
#     with open(private_whitelist) as f:
#         js_whitelist += filter(lambda l: bool(l), f.read().split('\n'))

# for website in js_whitelist:
#     with config.pattern(website) as p:
#         p.content.javascript.enabled = True


# per-domain settings
# config.set('content.javascript.enabled', True, 'file://*')
# config.set('content.javascript.enabled', True, 'chrome://*/*')
# config.set('content.javascript.enabled', True, 'qute://*/*')

# config.set('content.notifications.enabled', False, 'app.mockplus.cn')
# config.set('content.notifications.show_origin', False, '*://app.wire.com')

# config.set('content.register_protocol_handler', True, 'mail.google.com')
# config.set('content.register_protocol_handler', True, '*://calendar.google.com')
# config.set('content.register_protocol_handler', False, '*://outlook.office365.com')
# config.set('content.register_protocol_handler', True, '*://teams.microsoft.com')

# config.set('content.media.audio_video_capture', True, '*://app.wire.com')
# config.set('content.media.audio_video_capture', True, '*://teams.microsoft.com')
# config.set('content.media.audio_capture', True, '*://app.wire.com')
# config.set('content.media.audio_capture', True, '*://teams.microsoft.com')
# config.set('content.media.video_capture', True, '*://app.wire.com')
# config.set('content.media.video_capture', True, '*://teams.microsoft.com')

# config.set('content.desktop_capture', True, '*://teams.microsoft.com')
# config.set('content.desktop_capture', True, '*://app.wire.com')
# config.set('content.desktop_capture', True, '*://app.wire.com')

# config.set('content.cookies.accept', 'all', '*://teams.microsoft.com')
# config.set('content.cookies.accept', 'no-unknown-3rdparty', 'chrome-devtools://*')
# config.set('content.cookies.accept', 'no-unknown-3rdparty', 'devtools://*')

# config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')
# config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://accounts.google.com/*')
# config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')
# config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')
